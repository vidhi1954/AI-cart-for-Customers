import numpy as np
from queue import PriorityQueue

def find_path(matrix, start, end):
    rows, cols = matrix.shape
    directions = [(0, 1), (1, 0), (0, -1), (-1, 0)]  # Right, Down, Left, Up
    direction_names = ['Right', 'Down', 'Left', 'Up']

    def is_valid(x, y):
        return 0 <= x < rows and 0 <= y < cols and matrix[x, y] == 0

    def heuristic(a, b):
        return abs(a[0] - b[0]) + abs(a[1] - b[1])

    pq = PriorityQueue()
    pq.put((0, start))
    came_from = {}
    cost_so_far = {}
    came_from[start] = None
    cost_so_far[start] = 0

    while not pq.empty():
        _, current = pq.get()

        if current == end:
            break

        for d, (dx, dy) in enumerate(directions):
            next_pos = (current[0] + dx, current[1] + dy)
            new_cost = cost_so_far[current] + 1
            if is_valid(*next_pos) and (next_pos not in cost_so_far or new_cost < cost_so_far[next_pos]):
                cost_so_far[next_pos] = new_cost
                priority = new_cost + heuristic(end, next_pos)
                pq.put((priority, next_pos))
                came_from[next_pos] = (current, direction_names[d])

    path = []
    directions_list = []
    step = end
    while step != start:
        prev, direction = came_from[step]
        path.append(step)
        directions_list.append(direction)
        step = prev
    path.append(start)
    path.reverse()
    directions_list.reverse()

    return path, directions_list

def directions_to_text(directions):
    if not directions:
        return "You have arrived at your destination."
    
    directions_text = []
    for direction in directions:
        if direction == 'Right':
            directions_text.append("Go right.")
        elif direction == 'Down':
            directions_text.append("Go straight.")
        elif direction == 'Left':
            directions_text.append("Go left.")
        elif direction == 'Up':
            directions_text.append("Go back.")
    
    return " ".join(directions_text)

# Example usage
matrix = np.array([
    [0, 0, 0, 0, 1],
    [1, 1, 0, 1, 0],
    [0, 0, 0, 1, 0],
    [0, 1, 0, 0, 1],
    [0, 0, 0, 0, 0]
])

start = (0, 0)
end = (4, 3)

path, directions = find_path(matrix, start, end)
directions_text = directions_to_text(directions)

print("Path:", path)
print("Directions:", directions)
print("Instructions:", directions_text)
